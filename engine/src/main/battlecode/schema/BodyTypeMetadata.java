// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Metadata about all bodies of a particular type.
 */
public final class BodyTypeMetadata extends Table {
  public static BodyTypeMetadata getRootAsBodyTypeMetadata(ByteBuffer _bb) { return getRootAsBodyTypeMetadata(_bb, new BodyTypeMetadata()); }
  public static BodyTypeMetadata getRootAsBodyTypeMetadata(ByteBuffer _bb, BodyTypeMetadata obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public BodyTypeMetadata __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  /**
   * The relevant type.
   */
  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The spawn source.
   */
  public byte spawnSource() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * the convictionRatio of this type
   */
  public float convictionRatio() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * cooldown of this type
   */
  public float actionCooldown() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  /**
   * action radius if this type
   */
  public int actionRadiusSquared() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * sensor radius squared for this type
   */
  public int sensorRadiusSquared() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * detection radius of this type
   */
  public int detectionRadiusSquared() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * bytecode limit for this type
   */
  public int bytecodeLimit() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBodyTypeMetadata(FlatBufferBuilder builder,
      byte type,
      byte spawnSource,
      float convictionRatio,
      float actionCooldown,
      int actionRadiusSquared,
      int sensorRadiusSquared,
      int detectionRadiusSquared,
      int bytecodeLimit) {
    builder.startObject(8);
    BodyTypeMetadata.addBytecodeLimit(builder, bytecodeLimit);
    BodyTypeMetadata.addDetectionRadiusSquared(builder, detectionRadiusSquared);
    BodyTypeMetadata.addSensorRadiusSquared(builder, sensorRadiusSquared);
    BodyTypeMetadata.addActionRadiusSquared(builder, actionRadiusSquared);
    BodyTypeMetadata.addActionCooldown(builder, actionCooldown);
    BodyTypeMetadata.addConvictionRatio(builder, convictionRatio);
    BodyTypeMetadata.addSpawnSource(builder, spawnSource);
    BodyTypeMetadata.addType(builder, type);
    return BodyTypeMetadata.endBodyTypeMetadata(builder);
  }

  public static void startBodyTypeMetadata(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addSpawnSource(FlatBufferBuilder builder, byte spawnSource) { builder.addByte(1, spawnSource, 0); }
  public static void addConvictionRatio(FlatBufferBuilder builder, float convictionRatio) { builder.addFloat(2, convictionRatio, 0.0f); }
  public static void addActionCooldown(FlatBufferBuilder builder, float actionCooldown) { builder.addFloat(3, actionCooldown, 0.0f); }
  public static void addActionRadiusSquared(FlatBufferBuilder builder, int actionRadiusSquared) { builder.addInt(4, actionRadiusSquared, 0); }
  public static void addSensorRadiusSquared(FlatBufferBuilder builder, int sensorRadiusSquared) { builder.addInt(5, sensorRadiusSquared, 0); }
  public static void addDetectionRadiusSquared(FlatBufferBuilder builder, int detectionRadiusSquared) { builder.addInt(6, detectionRadiusSquared, 0); }
  public static void addBytecodeLimit(FlatBufferBuilder builder, int bytecodeLimit) { builder.addInt(7, bytecodeLimit, 0); }
  public static int endBodyTypeMetadata(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

