// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A profiler file is a collection of profiles.
 * When profiling is enabled there is one of these per team per match.
 */
public final class ProfilerFile extends Table {
  public static ProfilerFile getRootAsProfilerFile(ByteBuffer _bb) { return getRootAsProfilerFile(_bb, new ProfilerFile()); }
  public static ProfilerFile getRootAsProfilerFile(ByteBuffer _bb, ProfilerFile obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public ProfilerFile __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  /**
   * The method names that are referred to in the events.
   */
  public String frames(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int framesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  /**
   * The recorded profiles, one per robot.
   */
  public ProfilerProfile profiles(int j) { return profiles(new ProfilerProfile(), j); }
  public ProfilerProfile profiles(ProfilerProfile obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int profilesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createProfilerFile(FlatBufferBuilder builder,
      int framesOffset,
      int profilesOffset) {
    builder.startObject(2);
    ProfilerFile.addProfiles(builder, profilesOffset);
    ProfilerFile.addFrames(builder, framesOffset);
    return ProfilerFile.endProfilerFile(builder);
  }

  public static void startProfilerFile(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addFrames(FlatBufferBuilder builder, int framesOffset) { builder.addOffset(0, framesOffset, 0); }
  public static int createFramesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFramesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addProfiles(FlatBufferBuilder builder, int profilesOffset) { builder.addOffset(1, profilesOffset, 0); }
  public static int createProfilesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startProfilesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endProfilerFile(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

